{"version":3,"file":"static/js/639.1c0ffa3d.chunk.js","mappings":"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","sources":["components/FormAddContact/FormAddContact.styled.jsx","store/filter/selectorsFilter.js","store/contactsList/selectorsContacts.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/FormAddContact/FormAddContact.jsx","components/Header/Header.styled.jsx","components/Header/Header.jsx","page/PhoneBook.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContainerForm = styled.form`\n  padding: 15px;\n  border: 2px solid var(--color-secondary-bg);\n  border-radius: 10px;\n  display: inline-block;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-weight: 700;\n  font-size: 24px;\n  &.margin-top30 {\n    margin-top: 30px;\n  }\n`;\n\nexport const Input = styled.input`\n  display: block;\n  border-radius: 10px;\n  padding: 4px 10px;\n  margin-top: 5px;\n  margin-bottom: 15px;\n  font-weight: 700;\n  font-size: 24px;\n  color: var(--color-primary-bg);\n  &.margin-bottom0 {\n    margin-bottom: 0;\n  }\n  &.login {\n    margin-left: auto;\n    margin-right: auto;\n  }\n`;\n\nexport const Btn = styled.button`\n  padding: 5px 15px;\n  border-radius: 10px;\n  font-weight: 700;\n  font-size: 24px;\n  background-color: var(--color-white);\n  color: var(--color-primary-bg);\n  cursor: pointer;\n  border: 1px solid var(--color-secondary-bg);\n  &:hover,\n  &:focus {\n    background-color: var(--color-accent);\n  }\n`;\n","export const selectFilter = state => state.filter.filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'store/filter/selectorsFilter';\n\nexport const selectContacts = state => state.contactsList.items;\n\nexport const selectStatusLoading = state => state.contactsList.isLoading;\n\nexport const selectError = state => state.contactsList.error;\n\nexport const selectFilterContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contactList, filter) => {\n    if (contactList.length === 0) {\n      return [];\n    }\n    if (isNaN(filter[0])) {\n      return contactList.filter(item =>\n        item.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    } else {\n      return contactList.filter(item => item.number.includes(filter));\n    }\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  &:not(:last-child) {\n    padding-bottom: 10px;\n  }\n`;\n\nexport const Contacts = styled.p`\n  display: inline-block;\n  font-weight: 500;\n  font-size: 22px;\n  margin-right: 10px;\n`;\n\nexport const Btn = styled.button`\n  padding: 3px 15px;\n  border-radius: 10px;\n  font-weight: 500;\n  font-size: 20px;\n  background-color: var(--color-white);\n  color: var(--color-primary-bg);\n  cursor: pointer;\n  border: 1px solid var(--color-secondary-bg);\n  &:hover,\n  &:focus {\n    background-color: var(--color-accent);\n  }\n`;\n\nexport const Text = styled.p`\n  font-weight: 500;\n  font-size: 22px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactThunk } from 'store/contactsList/operationContacts';\nimport {\n  selectFilterContacts,\n  selectStatusLoading,\n} from 'store/contactsList/selectorsContacts';\nimport { Btn, Contacts, Item, Text } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contactList = useSelector(selectFilterContacts);\n  const isLoading = useSelector(selectStatusLoading);\n  return (\n    <>\n      {contactList.length === 0 ? (\n        !isLoading && <Text>No contacts</Text>\n      ) : (\n        <ul>\n          {contactList.map(name => (\n            <Item key={name.id}>\n              <Contacts>\n                {name.name}: {name.number}\n              </Contacts>\n              <Btn\n                type=\"button\"\n                id={name.id}\n                onClick={({ target: { id } }) => {\n                  if (!isLoading) {\n                    dispatch(deleteContactThunk(id));\n                  }\n                }}\n              >\n                Delete\n              </Btn>\n            </Item>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","import { Input, Label } from 'components/FormAddContact/FormAddContact.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateFilterValue } from 'store/filter/filterSlice';\nimport { selectFilter } from 'store/filter/selectorsFilter';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleClick = ({ target: { value } }) => {\n    dispatch(updateFilterValue(value));\n  };\n  return (\n    <>\n      <Label>\n        Find contacts by name\n        <Input\n          value={filter}\n          type=\"text\"\n          name=\"filter\"\n          onChange={handleClick}\n        />\n      </Label>\n    </>\n  );\n};\n","import { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContactThunk } from 'store/contactsList/operationContacts';\nimport { selectContacts } from 'store/contactsList/selectorsContacts';\nimport { popupMessage, typePopupMessage } from 'utils/popupMessage';\nimport { Btn, ContainerForm, Input, Label } from './FormAddContact.styled';\n\nexport const FormAddContact = () => {\n  const dispatch = useDispatch();\n  const contactList = useSelector(selectContacts);\n\n  const formik = useFormik({\n    initialValues: { name: '', number: '' },\n    onSubmit: (values, { resetForm }) => {\n      addContact(values, resetForm);\n    },\n  });\n\n  const addContact = (values, resetForm) => {\n    const isContact = contactList.find(\n      contact => contact.name.toLowerCase() === values.name.toLowerCase()\n    );\n    const isPhone = contactList.find(\n      contact => contact.number.toLowerCase() === values.number.toLowerCase()\n    );\n    if (isContact && isPhone) {\n      popupMessage('This contact already exists!', typePopupMessage.warning);\n      return;\n    }\n    if (isContact) {\n      popupMessage(\n        `Contact with the name ${values.name} already exists!`,\n        typePopupMessage.warning\n      );\n      return;\n    }\n    if (isPhone) {\n      popupMessage(\n        `Another name registered to this number!`,\n        typePopupMessage.warning\n      );\n      return;\n    } else {\n      dispatch(addContactThunk(values));\n      resetForm();\n    }\n  };\n\n  return (\n    <>\n      <ContainerForm onSubmit={formik.handleSubmit}>\n        <Label>\n          Name\n          <Input\n            value={formik.values.name}\n            type=\"text\"\n            name=\"name\"\n            onChange={formik.handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label>\n          Number\n          <Input\n            value={formik.values.number}\n            type=\"tel\"\n            name=\"number\"\n            onChange={formik.handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <Btn type=\"submit\">Add contact</Btn>\n      </ContainerForm>\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const HeaderPage = styled.header`\n  padding: 20px 200px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: var(--color-secondary-bg);\n`;\n\nexport const Logo = styled.p`\n  display: inline-block;\n  font-weight: 700;\n  font-size: 30px;\n  color: var(--color-accent);\n`;\n\nexport const Name = styled.p`\n  display: inline-block;\n  font-weight: 500;\n  font-size: 25px;\n  margin-right: 20px;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nexport const Btn = styled.button`\n  padding: 5px 15px;\n  border-radius: 10px;\n  font-weight: 700;\n  font-size: 24px;\n  background-color: var(--color-white);\n  color: var(--color-primary-bg);\n  cursor: pointer;\n  border: 1px solid var(--color-secondary-bg);\n  &:hover,\n  &:focus {\n    background-color: var(--color-accent);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { logOut } from 'store/auth/operationAuth';\nimport { selectUser } from 'store/auth/selectorsAuth';\nimport { Btn, Container, HeaderPage, Logo, Name } from './Header.styled';\n\nexport const Header = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n\n  const handleClick = () => {\n    dispatch(logOut());\n  };\n\n  return (\n    <HeaderPage>\n      <Logo>PhoneBook</Logo>\n      <Container>\n        <Name>{user.name}</Name>\n        <Btn onClick={handleClick}>log Out</Btn>\n      </Container>\n    </HeaderPage>\n  );\n};\n","import { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { FormAddContact } from 'components/FormAddContact';\nimport { Header } from 'components/Header';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContactsThunk } from 'store/contactsList/operationContacts';\nimport {\n  Container,\n  ErrorTitle,\n  ErrorType,\n  SubContainer,\n  TitleH2,\n} from './PhoneBook.styled';\nimport {\n  selectStatusLoading,\n  selectError,\n} from 'store/contactsList/selectorsContacts';\nimport { Modal } from 'components/Modal';\nimport { Loader } from 'components/Loader';\n\nconst PhoneBook = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectStatusLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Header />\n      <main>\n        <Container>\n          <SubContainer>\n            <Filter />\n            <TitleH2>Contacts</TitleH2>\n            <ContactList />\n          </SubContainer>\n\n          <FormAddContact />\n          {isLoading && (\n            <Modal>\n              <Loader />\n            </Modal>\n          )}\n          {error && (\n            <Modal>\n              <ErrorTitle>\n                Oops, something went wrong, try again later.\n              </ErrorTitle>\n              <ErrorType>Error: {error}</ErrorType>\n            </Modal>\n          )}\n        </Container>\n      </main>\n    </>\n  );\n};\nexport default PhoneBook;\n"],"names":["ContainerForm","styled","Label","Input","Btn","selectFilter","state","filter","selectContacts","contactsList","items","selectStatusLoading","isLoading","selectError","error","selectFilterContacts","createSelector","contactList","length","isNaN","item","name","toLowerCase","includes","number","Item","Contacts","Text","ContactList","dispatch","useDispatch","useSelector","map","type","id","onClick","target","deleteContactThunk","Filter","value","onChange","updateFilterValue","FormAddContact","formik","useFormik","initialValues","onSubmit","values","resetForm","addContact","isContact","find","contact","isPhone","popupMessage","typePopupMessage","addContactThunk","handleSubmit","handleChange","pattern","title","required","HeaderPage","Logo","Name","Container","Header","user","selectUser","logOut","useEffect","getContactsThunk","Modal","Loader"],"sourceRoot":""}